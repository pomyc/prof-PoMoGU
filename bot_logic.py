import os
import openai
from flask import jsonify
from seniority_calculator import calculate_seniority
import chromadb
from chromadb.config import Settings

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è OpenAI
openai.api_key = os.getenv("OPENAI_API_KEY")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª–æ–∫–∞–ª—å–Ω–æ—ó –±–∞–∑–∏ –∑–Ω–∞–Ω—å ChromaDB
chroma_client = chromadb.Client(Settings(
    persist_directory="./knowledge_base",
    chroma_db_impl="duckdb+parquet"
))

collection = chroma_client.get_or_create_collection(name="prof_union_knowledge")

# –°—Ç–∞–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ —Å—Ç–∞–∂—É —á–∏ –±–∞–∑–∏ –∑–Ω–∞–Ω—å)
user_state = {}

def handle_message(data):
    message = data['message']['text']
    chat_id = data['message']['chat']['id']
    user_id = data['message']['from']['id']

    # –Ø–∫—â–æ —Å—Ç–∞—Ä—Ç –∞–±–æ –ø–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏
    if message.strip().lower() in ["/start", "start"]:
        return jsonify({
            "method": "sendMessage",
            "chat_id": chat_id,
            "text": "üëã –í—ñ—Ç–∞—é! –Ø –ø—Ä–æ—Ñ—Å–ø—ñ–ª–∫–æ–≤–∏–π –ø–æ–º—ñ—á–Ω–∏–∫. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            "reply_markup": {
                "keyboard": [
                    [{"text": "üìã –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è"}],
                    [{"text": "üìÖ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ç—Ä—É–¥–æ–≤–æ–≥–æ —Å—Ç–∞–∂—É"}],
                    [{"text": "üìö –ó–∞–ø–∏—Ç –¥–æ –ø—Ä–æ—Ñ—Å–ø—ñ–ª–∫–æ–≤–æ—ó –ë–î"}],
                    [{"text": "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏ –ø—Ä–æ—Ñ—Å–ø—ñ–ª–∫–∏"}]
                ],
                "resize_keyboard": True,
                "one_time_keyboard": False
            }
        })

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–±–∏—Ä–∞—î "–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ç—Ä—É–¥–æ–≤–æ–≥–æ —Å—Ç–∞–∂—É"
    if message.strip() == "üìÖ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ç—Ä—É–¥–æ–≤–æ–≥–æ —Å—Ç–∞–∂—É":
        user_state[user_id] = "awaiting_seniority_input"
        return jsonify({
            "method": "sendMessage",
            "chat_id": chat_id,
            "text": "üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –ø–æ—á–∞—Ç–∫—É —Ç–∞ –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ —á–µ—Ä–µ–∑ –∫—Ä–∞–ø–∫—É –∑ –∫–æ–º–æ—é (;).\n–ü—Ä–∏–∫–ª–∞–¥:\n01.09.2015; 24.04.2025\n–ê–±–æ –æ–¥–Ω—É –¥–∞—Ç—É, —è–∫—â–æ –ø—Ä–∞—Ü—é—î—Ç–µ –¥–æ—Å—ñ."
        })

    if user_state.get(user_id) == "awaiting_seniority_input":
        reply = calculate_seniority_input(message)
        user_state.pop(user_id, None)
        return jsonify({"method": "sendMessage", "chat_id": chat_id, "text": reply})

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–±–∏—Ä–∞—î "–ö–æ–Ω—Ç–∞–∫—Ç–∏ –ø—Ä–æ—Ñ—Å–ø—ñ–ª–∫–∏"
    if message.strip() == "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏ –ø—Ä–æ—Ñ—Å–ø—ñ–ª–∫–∏":
        return jsonify({
            "method": "sendMessage",
            "chat_id": chat_id,
            "text": "üìç –î–Ω—ñ–ø—Ä–æ, –ø—Ä. –î.–Ø–≤–æ—Ä–Ω–∏—Ü—å–∫–æ–≥–æ, 93, –æ—Ñ. 327\nüìû 050 324-54-11\nüìß profpmgu@gmail.com\nüåê http://pmguinfo.dp.ua"
        })

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–±–∏—Ä–∞—î "–ó–∞–ø–∏—Ç –¥–æ –ø—Ä–æ—Ñ—Å–ø—ñ–ª–∫–æ–≤–æ—ó –ë–î"
    if message.strip() == "üìö –ó–∞–ø–∏—Ç –¥–æ –ø—Ä–æ—Ñ—Å–ø—ñ–ª–∫–æ–≤–æ—ó –ë–î":
        user_state[user_id] = "awaiting_knowledge_query"
        return jsonify({
            "method": "sendMessage",
            "chat_id": chat_id,
            "text": "üìö –í–≤–µ–¥—ñ—Ç—å –í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –ø–æ—à—É–∫—É —É –±–∞–∑—ñ –∑–Ω–∞–Ω—å:"
        })

    if user_state.get(user_id) == "awaiting_knowledge_query":
        reply = search_in_knowledge_base(message)
        user_state.pop(user_id, None)
        return jsonify({"method": "sendMessage", "chat_id": chat_id, "text": reply})

    # –í —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É ‚Äî –ø—Ä–∞—Ü—é—î —è–∫ "–ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è" —á–µ—Ä–µ–∑ GPT
    reply = ask_gpt(message)
    return jsonify({"method": "sendMessage", "chat_id": chat_id, "text": reply})

def calculate_seniority_input(message):
    try:
        if ";" in message:
            start_date, end_date = [d.strip() for d in message.split(";")]
            return calculate_seniority(start_date, end_date)
        else:
            return calculate_seniority(message.strip())
    except Exception as e:
        return (
            "‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –í–∏ –≤–≤–µ–ª–∏ –¥–∞—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†.\n"
            "–ü—Ä–∏–∫–ª–∞–¥: 01.09.2015; 24.04.2025"
        )

def ask_gpt(message):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–í–∏ –ø—Ä–æ—Ñ—Å–ø—ñ–ª–∫–æ–≤–∏–π –ø–æ–º—ñ—á–Ω–∏–∫. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ, –≤–≤—ñ—á–ª–∏–≤–æ, –∑—Ä–æ–∑—É–º—ñ–ª–æ."},
                {"role": "user", "content": message}
            ]
        )
        return response.choices[0].message.content
    except Exception as e:
        print(f"‚ùå GPT error: {e}")
        return (
            "üîç –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ç–æ—á–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.\n"
            "üìç –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—Ä–æ—Ñ—Å–ø—ñ–ª–∫–∏:\n"
            "–î–Ω—ñ–ø—Ä–æ, –ø—Ä. –î.–Ø–≤–æ—Ä–Ω–∏—Ü—å–∫–æ–≥–æ, 93, –∫.327\n"
            "üìû 050 324-54-11\n"
            "üìß profpmgu@gmail.com"
        )

def search_in_knowledge_base(query):
    try:
        results = collection.query(
            query_texts=[query],
            n_results=1
        )
        documents = results.get('documents', [[]])[0]

        if not documents:
            return "üìö –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è —É –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –±–∞–∑—ñ –∑–Ω–∞–Ω—å."

        doc_text = documents[0]

        return (
            f"üìö –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ –±–∞–∑–∏ –∑–Ω–∞–Ω—å:\n\n"
            f"{doc_text}\n\n"
            f"–î–∂–µ—Ä–µ–ª–æ: –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –±–∞–∑–∞ –ø—Ä–æ—Ñ—Å–ø—ñ–ª–∫–∏"
        )
    except Exception as e:
        print(f"‚ùå Search error: {e}")
        return "‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É —É –±–∞–∑—ñ –∑–Ω–∞–Ω—å."
